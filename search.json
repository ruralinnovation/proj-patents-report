[
  {
    "objectID": "pipeline.html",
    "href": "pipeline.html",
    "title": "Result of pipelines",
    "section": "",
    "text": "Code\nlibrary(targets)\nsource(\"R/utils.R\")",
    "crumbs": [
      "Home",
      "Result of pipelines"
    ]
  },
  {
    "objectID": "pipeline.html#pipeline-schema",
    "href": "pipeline.html#pipeline-schema",
    "title": "Result of pipelines",
    "section": "Pipeline schema:",
    "text": "Pipeline schema:\n\n\nCode\ntar_glimpse()",
    "crumbs": [
      "Home",
      "Result of pipelines"
    ]
  },
  {
    "objectID": "pipeline.html#county-data",
    "href": "pipeline.html#county-data",
    "title": "Result of pipelines",
    "section": "County data",
    "text": "County data\n\nFocus on assignee for location:\n\n\nCode\ncnty &lt;- read.csv(\"data/county_patent.csv\")\ntable_with_options(cnty)\n\n\n\n\n\n\n\n\nUsing location of inventor\n\n\nCode\ncnty &lt;- read.csv(\"data/county_inv.csv\")\ntable_with_options(cnty)",
    "crumbs": [
      "Home",
      "Result of pipelines"
    ]
  },
  {
    "objectID": "map_relation.html",
    "href": "map_relation.html",
    "title": "Relations between tables",
    "section": "",
    "text": "Code\nlibrary(dm, warn.conflicts = FALSE)\nlibrary(htmltools)\nlibrary(DiagrammeRsvg)\n\nsource(\"R/utils.R\")",
    "crumbs": [
      "Home",
      "Relations between tables"
    ]
  },
  {
    "objectID": "map_relation.html#first-step-download-nearly-all-data-sets.",
    "href": "map_relation.html#first-step-download-nearly-all-data-sets.",
    "title": "Relations between tables",
    "section": "First step: download nearly all data sets.",
    "text": "First step: download nearly all data sets.\nHere we have room for improvement if we want to automate it.\n\nthis could be a pot. improvement: https://books.ropensci.org/targets/cloud-storage.html",
    "crumbs": [
      "Home",
      "Relations between tables"
    ]
  },
  {
    "objectID": "map_relation.html#second-step-get-a-sample-of-all-of-them.",
    "href": "map_relation.html#second-step-get-a-sample-of-all-of-them.",
    "title": "Relations between tables",
    "section": "Second step: get a sample of all of them.",
    "text": "Second step: get a sample of all of them.\nI went with the first 5 rows.\n# 1. create some repos\nmkdir -p data/data_raw/unziped\nmkdir -p data/data_sample/\n# 2. I could find a way to unzip just the first rows\nunzip data/data_raw/\\*.zip -d data/data_raw/unziped\n# 3. Get what we need\nfor file in data/data_raw/unziped/*.tsv ; do\n        head -n5 \"$file\" &gt;  \"$file.head\"\n        echo \"$file.head\" \ndone\n# 4. Store it were we need it\nmv data/data_raw/unziped/*.head data/data_sample\n# 5. delete not needed and rename\nrm -rf data/data_raw/unziped",
    "crumbs": [
      "Home",
      "Relations between tables"
    ]
  },
  {
    "objectID": "map_relation.html#third-read-everything-in-r.",
    "href": "map_relation.html#third-read-everything-in-r.",
    "title": "Relations between tables",
    "section": "Third: read everything in R.",
    "text": "Third: read everything in R.\n\n\nCode\nlist_samples &lt;- read_sample(\"data/data_sample/\") \nnames(list_samples)\n\n\n [1] \"g_application.tsv.head\"               \n [2] \"g_assignee_disambiguated.tsv.head\"    \n [3] \"g_attorney_disambiguated.tsv.head\"    \n [4] \"g_botanic.tsv.head\"                   \n [5] \"g_cpc_at_issue.tsv.head\"              \n [6] \"g_cpc_current.tsv.head\"               \n [7] \"g_cpc_title.tsv.head\"                 \n [8] \"g_examiner_not_disambiguated.tsv.head\"\n [9] \"g_figures.tsv.head\"                   \n[10] \"g_foreign_citation.tsv.head\"          \n[11] \"g_foreign_priority.tsv.head\"          \n[12] \"g_gov_interest_contracts.tsv.head\"    \n[13] \"g_gov_interest_org.tsv.head\"          \n[14] \"g_gov_interest.tsv.head\"              \n[15] \"g_inventor_disambiguated.tsv.head\"    \n[16] \"g_ipc_at_issue.tsv.head\"              \n[17] \"g_location_disambiguated.tsv.head\"    \n[18] \"g_other_reference.tsv.head\"           \n[19] \"g_patent.tsv.head\"                    \n[20] \"g_persistent_assignee.tsv.head\"       \n[21] \"g_persistent_inventor.tsv.head\"       \n[22] \"g_us_application_citation.tsv.head\"   \n[23] \"g_us_patent_citation.tsv.head\"        \n[24] \"g_uspc_at_issue.tsv.head\"             \n[25] \"g_wipo_technology.tsv.head\"",
    "crumbs": [
      "Home",
      "Relations between tables"
    ]
  },
  {
    "objectID": "map_relation.html#forth-use-dm-to-do-a-nice-schema",
    "href": "map_relation.html#forth-use-dm-to-do-a-nice-schema",
    "title": "Relations between tables",
    "section": "Forth: use DM to do a nice schema",
    "text": "Forth: use DM to do a nice schema\n\n\nCode\n# simplify my list I went back and forth\ni_data &lt;- c(\"g_assignee_disambiguated.tsv.head\",\n            \"g_inventor_disambiguated.tsv.head\", \n            \"g_location_disambiguated.tsv.head\", \n            \"g_patent.tsv.head\")\n\n# yes dm can also just take a list of df\npot_schema_no_keys &lt;- as_dm(list_samples[i_data])\n\n\nSadly I need to first test what are the primary and foreign key (PK and FK) and if I can trust the data about that: meaning reading a bunch of big csv and not only sampling to build the schema.\nI am first trying to get:\n\ncounty\nyear\nnb of inventor\nnb of assignee (organisation)\nnb of patents → using assignee for localisation\n\ndm offer high level functions that return tibble with result for all tables:\n\nenum_pk_candidates(a_table)\nand more targets function:\n\n\n\nCode\n(check_key(g_location_dis, location_id)) # a bit of strange behavior it return null on success?\n# test if we have value in g_assignee_dis$location_id not in g_location_dis \n# tests if x is a subset of y\ncheck_subset(g_assignee_dis, location_id, g_location_dis, location_id)\nnrow(g_assignee_dis[g_assignee_dis$location_id == \"\",])\n#  90823\nnrow(g_assignee_dis)\n# 8206092 \n# small number does not have location \ncheck_subset(g_assignee_dis[!g_assignee_dis$location_id == \"\",], location_id, g_location_dis, location_id)\n# return correct hence if we want use location as a fk for assignee we need to do that \n(check_key(g_location_dis, location_id)) \n## patent id \ncheck_subset(g_assignee_dis[!g_assignee_dis$location_id == \"\",], patent_id, g_patent, patent_id)\ncheck_subset(g_inventor_dis, patent_id, g_patent, patent_id)\n\n\nSlowly adding them:\n\n\nCode\npot_schema_pk_keys &lt;- \n    pot_schema_no_keys |&gt;\n        dm_add_pk(g_location_disambiguated.tsv.head, columns = location_id) |&gt; \n        dm_add_pk(g_patent.tsv.head, columns = patent_id)\n\n\nAdding Foreign keys:\n\n\nCode\npot_schema_all_keys &lt;- \n    pot_schema_pk_keys |&gt;\n     dm_add_fk(g_inventor_disambiguated.tsv.head, \n               location_id,\n               g_location_disambiguated.tsv.head) |&gt;\n    dm_add_fk(g_assignee_disambiguated.tsv.head,\n              location_id,\n              g_location_disambiguated.tsv.head) |&gt; \n    dm_add_fk(g_assignee_disambiguated.tsv.head,\n              patent_id,\n              g_patent.tsv.head) |&gt;\n    dm_add_fk(g_inventor_disambiguated.tsv.head,\n              patent_id,\n              g_patent.tsv.head)",
    "crumbs": [
      "Home",
      "Relations between tables"
    ]
  },
  {
    "objectID": "map_relation.html#five-try-to-render-that-schema",
    "href": "map_relation.html#five-try-to-render-that-schema",
    "title": "Relations between tables",
    "section": "Five: Try to render that schema:",
    "text": "Five: Try to render that schema:\n\n\nCode\nschema &lt;- dm_draw(pot_schema_all_keys, view_type = 'all')\n\n# kind of hacky \nschema_html &lt;- DiagrammeRsvg::export_svg(schema)\nhtmltools::HTML(schema_html )\n\n\n\n\n\n\n\n\n%0\n\n\n\n\n\n\ng_assignee_disambiguated.tsv.head\n\ng_assignee_disambiguated.tsv.head\n\npatent_id\n\nassignee_sequence\n\nassignee_id\n\ndisambig_assignee_individual_name_first\n\ndisambig_assignee_individual_name_last\n\ndisambig_assignee_organization\n\nassignee_type\n\nlocation_id\n\n\n\n\ng_location_disambiguated.tsv.head\n\ng_location_disambiguated.tsv.head\n\nlocation_id\n\ndisambig_city\n\ndisambig_state\n\ndisambig_country\n\nlatitude\n\nlongitude\n\ncounty\n\nstate_fips\n\ncounty_fips\n\n\n\n\ng_assignee_disambiguated.tsv.head:location_id-&gt;g_location_disambiguated.tsv.head:location_id\n\n\n\n\n\ng_patent.tsv.head\n\ng_patent.tsv.head\n\npatent_id\n\npatent_type\n\npatent_date\n\npatent_title\n\nwipo_kind\n\nnum_claims\n\nwithdrawn\n\nfilename\n\n\n\n\ng_assignee_disambiguated.tsv.head:patent_id-&gt;g_patent.tsv.head:patent_id\n\n\n\n\n\ng_inventor_disambiguated.tsv.head\n\ng_inventor_disambiguated.tsv.head\n\npatent_id\n\ninventor_sequence\n\ninventor_id\n\ndisambig_inventor_name_first\n\ndisambig_inventor_name_last\n\ngender_code\n\nlocation_id\n\n\n\n\ng_inventor_disambiguated.tsv.head:location_id-&gt;g_location_disambiguated.tsv.head:location_id\n\n\n\n\n\ng_inventor_disambiguated.tsv.head:patent_id-&gt;g_patent.tsv.head:patent_id",
    "crumbs": [
      "Home",
      "Relations between tables"
    ]
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "PatentsView also has a very nice glossary that I discovered later.\n“Assignee: Organization(s) and individual(s) that have an ownership interest in the legal rights a patent offers”1\n1 source: https://asklib.library.hbs.edu/faq/267606“Inventor: individual(s) who have contributed to the claimed invention. However, they may or may not have an ownership interest in the legal rights of the patent.”\n“Applicant: Organization or individual that files the patent application is called the “applicant.” This could be the original inventor, or it could be the assignee.”\nIPC: International Patent Classification\nCPC: Cooperative Patent Classification",
    "crumbs": [
      "Home",
      "Glossary"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Capturing notes and pieces of knowledge around: https://patentsview.org/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PatentsView Primer for CORI’s MDA",
    "section": "",
    "text": "PatentsView provides insights about patents.\nThe data can be accessed either with either:\n\ntheir elastic search API and an R wrapper around it (patentsview)\nor by bulk download"
  }
]